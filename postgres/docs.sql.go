// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: docs.sql

package postgres

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const createDocs = `-- name: CreateDocs :exec
INSERT INTO docs (path, content, embedding) VALUES ($1, $2, $3)
`

type CreateDocsParams struct {
	Path      string
	Content   []byte
	Embedding pgvector.Vector
}

func (q *Queries) CreateDocs(ctx context.Context, arg CreateDocsParams) error {
	_, err := q.db.Exec(ctx, createDocs, arg.Path, arg.Content, arg.Embedding)
	return err
}

const findTopDocsByEmbedding = `-- name: FindTopDocsByEmbedding :many
SELECT path, content FROM docs ORDER BY embedding <-> $1::vector LIMIT 10
`

type FindTopDocsByEmbeddingRow struct {
	Path    string
	Content []byte
}

func (q *Queries) FindTopDocsByEmbedding(ctx context.Context, dollar_1 pgvector.Vector) ([]FindTopDocsByEmbeddingRow, error) {
	rows, err := q.db.Query(ctx, findTopDocsByEmbedding, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindTopDocsByEmbeddingRow
	for rows.Next() {
		var i FindTopDocsByEmbeddingRow
		if err := rows.Scan(&i.Path, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasDoc = `-- name: HasDoc :one
SELECT EXISTS(SELECT 1 FROM docs WHERE path = $1)
`

func (q *Queries) HasDoc(ctx context.Context, path string) (bool, error) {
	row := q.db.QueryRow(ctx, hasDoc, path)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
