// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: docs.sql

package postgres

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const createDoc = `-- name: CreateDoc :exec
INSERT INTO docs (content, content_md5, embedding) VALUES ($1, $2, $3)
`

type CreateDocParams struct {
	Content    string
	ContentMd5 []byte
	Embedding  pgvector.Vector
}

func (q *Queries) CreateDoc(ctx context.Context, arg CreateDocParams) error {
	_, err := q.db.Exec(ctx, createDoc, arg.Content, arg.ContentMd5, arg.Embedding)
	return err
}

const findTop3DocsByEmbedding = `-- name: FindTop3DocsByEmbedding :many
SELECT content FROM docs ORDER BY (1 - (embedding <=> $1::vector)) LIMIT 3
`

func (q *Queries) FindTop3DocsByEmbedding(ctx context.Context, dollar_1 pgvector.Vector) ([]string, error) {
	rows, err := q.db.Query(ctx, findTop3DocsByEmbedding, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var content string
		if err := rows.Scan(&content); err != nil {
			return nil, err
		}
		items = append(items, content)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasDoc = `-- name: HasDoc :one
SELECT EXISTS(SELECT 1 FROM docs WHERE content_md5 = $1)
`

func (q *Queries) HasDoc(ctx context.Context, contentMd5 []byte) (bool, error) {
	row := q.db.QueryRow(ctx, hasDoc, contentMd5)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
